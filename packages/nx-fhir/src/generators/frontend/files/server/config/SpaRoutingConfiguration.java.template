package <%= packageBase %>.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.resource.PathResourceResolver;

import java.io.IOException;

/**
 * Configuration to support Next.js static export routing.
 * This handles Next.js's static HTML file structure where routes like /settings
 * map to settings.html files. This acts as a fallback after controller mappings
 * are checked, so API endpoints are automatically excluded.
 */
@Configuration
public class SpaRoutingConfiguration implements WebMvcConfigurer {

  @Override
  public void addResourceHandlers(ResourceHandlerRegistry registry) {
    // Serve static resources with Next.js routing support as a fallback
    // Setting a lower order (higher number) ensures this runs after controller
    // mappings
    registry.addResourceHandler("/**")
        .addResourceLocations("classpath:/static/")
        .resourceChain(false) // Disable caching chain to act as fallback
        .addResolver(new PathResourceResolver() {
          @Override
          protected Resource getResource(String resourcePath, Resource location) throws IOException {
            Resource requestedResource = location.createRelative(resourcePath);

            // If the exact resource exists, serve it
            if (requestedResource.exists() && requestedResource.isReadable()) {
              return requestedResource;
            }

            // Try to find a .html file for the path (Next.js static export pattern)
            // e.g., /settings -> settings.html
            if (!resourcePath.contains(".")) {
              // Remove leading slash if present
              String htmlPath = resourcePath.startsWith("/") ? resourcePath.substring(1) + ".html"
                  : resourcePath + ".html";

              Resource htmlResource = location.createRelative(htmlPath);
              if (htmlResource.exists() && htmlResource.isReadable()) {
                return htmlResource;
              }
            }

            // If nothing found, return Next.js 404 page
            Resource notFoundPage = new ClassPathResource("/static/404.html");
            if (notFoundPage.exists() && notFoundPage.isReadable()) {
              return notFoundPage;
            }

            // Ultimate fallback if even 404.html doesn't exist
            return null;
          }
        });
  }
}
